@using SL.Data
@using SL.Util
@{
    RequestUtil req = new RequestUtil();

    if ("add" == Request.QueryString["action"])
    {
        string lessonName = req.String("lessonName", false, "need title");
        string description = req.String("description", false, "need description");
        int lessonType = req.Int("lessonType", false, "need lessonType");
        decimal price = req.Decimal("price", false, "need price");
        decimal totalPrice = req.Decimal("totalPrice", false, "need totalprice");
        var cover = req.File("cover");
        int sort = req.Int("sort");

        if (req.HasError)
        {
            HtmlUtil.Output(new { success = false, msg = req.FirstError, errors = req.GetErrors() });
            return;
        }

        string src = cover.IsEmpty ? null : cover.Save();

        SQL.Execute("insert into Lesson (LessonName,Cover,Description,Sort,Price,TotalPrice,[Type]) values (@p0,@p1,@p2,@p3,@p4,@p5,@p6)", lessonName, src, description, sort, price, totalPrice, lessonType);

        HtmlUtil.Output(new { success = true });
        return;
    }
    else if ("modify" == Request.QueryString["action"])
    {
        int id = req.Int("id", false, "need id");
        string lessonName = req.String("lessonName", false, "need title");
        string description = req.String("description", false, "need description");
        decimal price = req.Decimal("price", false, "need price");
        decimal totalPrice = req.Decimal("totalPrice", false, "need totalprice");
        var cover = req.File("cover");
        int sort = req.Int("sort");

        if (req.HasError)
        {
            HtmlUtil.Output(new { success = false, msg = req.FirstError, errors = req.GetErrors() });
            return;
        }

        string set = "";
        List<object> parameters = new List<object> { id, lessonName, description, sort, price, totalPrice };

        if (!cover.IsEmpty)
        {
            string origSrc = SQL.QueryValue<string>("select Cover from Lesson where LessonID=@p0", id);

            RequestFile.Delete(origSrc);
            string src = cover.Save();

            set = ",Cover=@p" + parameters.Count;
            parameters.Add(src);
        }

        SQL.Execute("update Lesson set LessonName=@p1,Description=@p2,Sort=@p3,Price=@p4,TotalPrice=@p5" + set + " where LessonID=@p0", parameters.ToArray());

        HtmlUtil.Output(new { success = true });
        return;
    }
    else if ("delete" == Request.QueryString["action"])
    {
        int id = req.Int("id", false, "need id");

        if (req.HasError)
        {
            HtmlUtil.Output(new { success = false, msg = req.FirstError, errors = req.GetErrors() });
            return;
        }

        string origSrc = SQL.QueryValue<string>("select Cover from Lesson where LessonID=@p0", id);

        RequestFile.Delete(origSrc);
        using (var db = SL.Data.Database.Open())
        {
            db.Execute("insert into DeletedLesson (LessonID,LessonName,Cover,Description,Sort,Price,TotalPrice) select LessonID,LessonName,Cover,Description,Sort,Price,TotalPrice from Lesson where LessonID=@p0", id);
            db.Execute("delete from Lesson where LessonID=@p0", id);
        }

        HtmlUtil.Output(new { success = true });
        return;
    }
    else if ("query" == Request.QueryString["action"])
    {
        string keywords = req.String("keywords");
        string lessonType = req.String("lessonType");

        string where = "1=1";
        List<object> parameters = new List<object>();

        if (!string.IsNullOrEmpty(keywords))
        {
            where += " and (LessonName like '%'+@p" + parameters.Count + "+'%')";
            parameters.Add(keywords);
        }

        if (!string.IsNullOrEmpty(lessonType))
        {
            where += " and ([Type]=@p" + parameters.Count + ")";
            parameters.Add(req.Int("lessonType"));
        }

        var data = SQL.Query("select LessonID,LessonName,Cover,Description,Sort,Price,TotalPrice,[Type] from Lesson where " + where + " order by Sort desc", parameters.ToArray());

        if (data != null)
        {
            data.All(a =>
            {
                a.Cover = RequestFile.FullUrl(a.Cover);
                return true;
            });
        }

        HtmlUtil.Output(new { success = true, data = data });
        return;
    }

    ViewBag.Title = "课程管理";
    Layout = "~/Views/Shared/_ManageLayout.cshtml";
}
<h1>课程管理</h1>
<div id="toolbar" class="toolbar"></div>
<div id="grid"></div>
<script>
    seajs.use(['jquery','lib/buttons','lib/popup','lib/grid','lib/global.css'],function ($,Buttons,popup) {

        //添加
        var addingDialog=new popup.Form({
            url: '?action=add',
            title: '添加课程',
            width: 700,
            height: 400,
            controls: {
                lessonType: {
                    label: '课程类型',
                    type: 'select',
                    options: [{
                        text: '普通课程',
                        value: 1
                    },{
                        text: '测试课程',
                        value: 0
                    }]
                },
                lessonName: {
                    label: '课程名称',
                    type: 'text',
                    emptyAble: false,
                    emptyText: '请填写课程名称'
                },
                price: {
                    label: '单节价格',
                    type: 'text',
                    emptyAble: false,
                    emptyText: '请填写课程单节价格',
                    regex: /^\d+(\.\d+){0,1}$/,
                    regexText: '请填写正确的价格'
                },
                totalPrice: {
                    label: '课程总价',
                    type: 'text',
                    emptyAble: false,
                    emptyText: '请填写课程总价',
                    regex: /^\d+(\.\d+){0,1}$/,
                    regexText: '请填写正确的价格'
                },
                cover: {
                    label: '图片',
                    type: 'file'
                },
                sort: {
                    label: '排序',
                    type: 'text',
                    value: '0'
                },
                description: {
                    label: '课程描述',
                    labelVAlign: 'top',
                    width: 500,
                    height: 300,
                    type: 'textarea',
                    emptyAble: false,
                    emptyText: '请填写正文'
                }
            },
            buttons: [{
                text: '添加',
                click: function () {
                    addingDialog.submit({
                        beforeSend: function () {
                        },
                        success: function (res) {
                            if(res.success) {
                                addingDialog.hide().reset();
                                grid.search();
                            } else
                                alert(res.msg);
                        },
                        error: function () {
                        }
                    });
                }
            },{
                text: '取消',
                click: function () {
                    addingDialog.hide();
                }
            }]
        });

        //修改
        var modifyingDialog=new popup.Form({
            url: '?action=modify',
            title: '修改课程',
            width: 700,
            height: 400,
            controls: {
                id: {
                    type: 'hidden'
                },
                lessonName: {
                    label: '课程名称',
                    type: 'text',
                    emptyAble: false,
                    emptyText: '请填写课程名称'
                },
                price: {
                    label: '单节价格',
                    type: 'text',
                    emptyAble: false,
                    emptyText: '请填写课程单节价格',
                    regex: /^\d+(\.\d+){0,1}$/,
                    regexText: '请填写正确的价格'
                },
                totalPrice: {
                    label: '课程总价',
                    type: 'text',
                    emptyAble: false,
                    emptyText: '请填写课程总价',
                    regex: /^\d+(\.\d+){0,1}$/,
                    regexText: '请填写正确的价格'
                },
                cover: {
                    label: '图片',
                    type: 'file'
                },
                sort: {
                    label: '排序',
                    type: 'text',
                    value: '0'
                },
                description: {
                    label: '课程描述',
                    type: 'textarea',
                    labelVAlign: 'top',
                    width: 500,
                    height: 300,
                    emptyAble: false,
                    emptyText: '请填写正文'
                }
            },
            buttons: [{
                text: '修改',
                click: function () {
                    modifyingDialog.submit({
                        beforeSend: function () {
                        },
                        success: function (res) {
                            if(res.success) {
                                modifyingDialog.hide().reset();
                                grid.search();
                            } else
                                alert(res.msg);
                        },
                        error: function () {
                        }
                    });
                }
            },{
                text: '取消',
                click: function () {
                    modifyingDialog.hide();
                }
            }]
        });

        var buttons=new Buttons("#toolbar",[{
            text: "添加",
            ico: 'add',
            click: function () {
                addingDialog.show();
            }
        },{
            text: "修改",
            ico: "modify",
            disabled: true,
            click: function () {
                var data=grid.selectedRow().data;
                modifyingDialog.control("id").val(data.LessonID);
                modifyingDialog.control("lessonName").val(data.LessonName);
                modifyingDialog.control("sort").val(data.Sort);
                modifyingDialog.control("price").val(data.Price);
                modifyingDialog.control("totalPrice").val(data.Price);
                modifyingDialog.control("description").val(data.Description);
                modifyingDialog.show();
            }
        },{
            text: "删除",
            ico: "delete",
            disabled: true,
            click: function () {
                if(!window.confirm('确认删除？')) return;
                var data=grid.selectedRow().data;

                $.ajax({
                    url: '?action=delete',
                    type: 'post',
                    data: {
                        id: data.LessonID
                    },
                    dataType: 'json',
                    success: function (res) {
                        if(res.success) {
                            alert('删除成功！');
                            grid.search();
                        } else
                            alert(res.msg);
                    }
                });
            }
        }]);

        var grid=$('#grid').grid({
            search: {
                data: {
                    lessonType: {
                        label: '课程类型',
                        type: 'select',
                        options: [{
                            text: '普通课程',
                            value: 1
                        },{
                            text: '测试课程',
                            value: 0
                        }]
                    },
                    keywords: {
                        label: '关键字',
                        type: 'text'
                    }
                },
                beforeSend: function () {
                    buttons.items([1,2]).disable();
                },
                url: '?action=query'
            },
            onRowSelect: function (row,data) {
                buttons.items([1,2]).enable();
            },
            columns: [{
                text: '编号',
                bind: 'LessonID',
                width: 6
            },{
                text: '课程名',
                bind: 'LessonName',
                width: 10
            },{
                text: '课程描述',
                bind: 'Description',
                width: 10
            },{
                text: '课程类型',
                bind: 'Type',
                width: 6,
                render: function (cell,data) {
                    cell.append(data.Type==1?"普通课程":"测试课程");
                }
            },{
                text: '排序',
                bind: 'Sort',
                width: 6
            }]
        }).search();

    });
</script>
